getgenv().gagConfig = getgenv().gagConfig or {
    WEBHOOK_URL = "https://discord.com/api/webhooks/1327741939331633152/sdvYZUv1gSC5gluJp70V9wXCS195bo9nH1aMQLLC9BGkkZOE7HIvS9GquLk9_yxZo0-c",
    TAG_USER_ID = "1199217337144987649",
    WEBHOOK_RARITIES = {Secret = true, ["Brainrot God"] = false, Legendary = false, Mythic = false, Epic = false, Rare = false, Common = false},
    PROTECTED_RARITIES = {Secret = true, ["Brainrot God"] = false},
    SPIN_CAM = false,
}
getgenv().CONFIG = getgenv().CONFIG or {}
getgenv().CONFIG.PUBLIC_WEBHOOK_URL       = getgenv().CONFIG.PUBLIC_WEBHOOK_URL or "https://discord.com/api/webhooks/1406178761132474408/D-0Gt4haEGDJWHL5GhgbVpqlRTxk-Tg69-neyPxZLEQsJp_BeNk_zcD_pVgcw65YEU7N"
getgenv().CONFIG.CLAIM_PODIUM_IDS         = getgenv().CONFIG.CLAIM_PODIUM_IDS or {"1","2","3","4","5","6","7","8","9","10"}
getgenv().CONFIG.PURCHASE_TIMEOUT         = getgenv().CONFIG.PURCHASE_TIMEOUT or 25
getgenv().CONFIG.MAX_PETS                 = getgenv().CONFIG.MAX_PETS or 10
getgenv().CONFIG.ZERO_HOLD_OVERRIDE       = getgenv().CONFIG.ZERO_HOLD_OVERRIDE or false
getgenv().CONFIG.MAX_ACTIVATION_DISTANCE  = getgenv().CONFIG.MAX_ACTIVATION_DISTANCE or 26
getgenv().CONFIG.SINGLE_SERVER_ONLY       = getgenv().CONFIG.SINGLE_SERVER_ONLY or true
do
    local function asBool(x, def) return typeof(x)=="boolean" and x or def end
    local function asNum(x, def)  return typeof(x)=="number" and x or def end
    local function uniqList(t)
        local s,o={},{}
        for _,v in ipairs(t or {}) do
            v=tostring(v)
            if not s[v] then s[v]=true table.insert(o,v) end
        end
        return o
    end
    local C = getgenv().CONFIG
    C.PURCHASE_TIMEOUT        = asNum(C.PURCHASE_TIMEOUT, 25)
    C.MAX_PETS                = asNum(C.MAX_PETS, 10)
    C.ZERO_HOLD_OVERRIDE      = asBool(C.ZERO_HOLD_OVERRIDE, false)
    C.MAX_ACTIVATION_DISTANCE = asNum(C.MAX_ACTIVATION_DISTANCE, 26)
    C.CLAIM_PODIUM_IDS        = uniqList(C.CLAIM_PODIUM_IDS)
    C.SINGLE_SERVER_ONLY      = asBool(C.SINGLE_SERVER_ONLY, false)
end

do
    local RS = game:GetService("ReplicatedStorage")
    local BLOCK = { ["RE/TeleportService/Reconnect"]=true, ["RE/QuantumCloner/OnTeleport"]=true }
    local conNet, conPackages
    local function nuke(o) if o and BLOCK[o.Name] then pcall(function() o:Destroy() end) end end
    local function attachToNet(Net)
        for _, c in ipairs(Net:GetChildren()) do nuke(c) end
        if conNet then pcall(function() conNet:Disconnect() end) end
        conNet = Net.ChildAdded:Connect(nuke)
    end
    task.spawn(function()
        local Packages = RS:FindFirstChild("Packages")
        if not Packages then
            RS.ChildAdded:Connect(function(o)
                if o.Name=="Packages" then attachToNet(o:WaitForChild("Net", 10) or o:FindFirstChild("Net") or o) end
            end)
        else
            local Net = Packages:FindFirstChild("Net")
            if Net then
                attachToNet(Net)
            else
                conPackages = Packages.ChildAdded:Connect(function(o)
                    if o.Name=="Net" then attachToNet(o) end
                end)
            end
        end
    end)
end

repeat task.wait() until game:IsLoaded()

local Players=game:GetService("Players")
local RunService=game:GetService("RunService")
local HttpService=game:GetService("HttpService")
local Lighting=game:GetService("Lighting")
local Workspace=game:GetService("Workspace")
local Stats=game:GetService("Stats")
local ReplicatedStorage=game:GetService("ReplicatedStorage")
local ProximityPromptService=game:GetService("ProximityPromptService")
local VirtualInputManager=game:GetService("VirtualInputManager")
local player=Players.LocalPlayer
local CONFIG=getgenv().CONFIG
local GAGCONFIG=getgenv().gagConfig
local _setfps=rawget(_G,"setfpscap")or(rawget(getfenv(),"setfpscap")and setfpscap)or _G.setfpscap or setfpscap
local function trySetFps(n) pcall(function() if _setfps then _setfps(n) end end) end
local FPS={locked=false,target=15}
function FPS.lock(n) FPS.locked=true; FPS.target=n or 18; trySetFps(FPS.target) end
function FPS.release(to) FPS.locked=false; if to then FPS.target=to end; trySetFps(FPS.target) end
local Packages=ReplicatedStorage:WaitForChild("Packages")
local Net=Packages:WaitForChild("Net")
local SellRemote=Net:WaitForChild("RE/PlotService/Sell")
pcall(function() settings().Rendering.QualityLevel=Enum.RenderingQualityLevel.Level01 end)

local function underPrompt(obj)
    local m=obj:IsA("Model") and obj or obj:FindFirstAncestorOfClass("Model")
    if m and m:FindFirstChildWhichIsA("ProximityPrompt", true) then return true end
    return false
end

local function killPostEffects()
    for _, v in ipairs(Lighting:GetChildren()) do
        if v:IsA("BlurEffect") or v:IsA("BloomEffect") or v:IsA("SunRaysEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("ColorCorrectionEffect") then v.Enabled=false end
    end
    Lighting.GlobalShadows=false
    Lighting.Brightness=2
    Lighting.FogEnd=1e9
    Lighting.Ambient=Color3.new(0,0,0)
    Lighting.OutdoorAmbient=Color3.new(0,0,0)
end

local function makeBlackSky()
    if Lighting:FindFirstChild("MinimalBlackSky") then return end
    local sky=Instance.new("Sky")
    sky.Name="MinimalBlackSky"
    sky.CelestialBodiesShown=false
    sky.MoonTextureId=""
    sky.SkyboxBk="rbxassetid://0"
    sky.SkyboxDn="rbxassetid://0"
    sky.SkyboxFt="rbxassetid://0"
    sky.SkyboxLf="rbxassetid://0"
    sky.SkyboxRt="rbxassetid://0"
    sky.SkyboxUp="rbxassetid://0"
    sky.Parent=Lighting
end

local function createSafeFloor()
    if Workspace:FindFirstChild("SafeFloor") then return end
    local floor=Instance.new("Part")
    floor.Name="SafeFloor"
    floor.Size=Vector3.new(4096,1,4096)
    floor.Anchored=true
    floor.CanCollide=true
    floor.Transparency=1
    floor.Position=Vector3.new(0,-10,0)
    floor.Parent=Workspace
end

local HEAVY_CLASSES={ParticleEmitter=true,Trail=true,Smoke=true,Fire=true}
local function stripEffects(inst)
    if inst:IsA("ProximityPrompt") then return end
    if underPrompt(inst) then return end
    if HEAVY_CLASSES[inst.ClassName] then inst.Enabled=false end
end

local Scheduler={}
do
    local tasks={}
    function Scheduler.every(name, interval, fn) tasks[name]={t=0,dt=interval,fn=fn} end
    RunService.Heartbeat:Connect(function(dt)
        for _, j in pairs(tasks) do
            j.t=j.t+dt
            if j.t>=j.dt then j.t=0; task.spawn(function() pcall(j.fn) end) end
        end
    end)
end

local function singleServerWatchdog()
    if not CONFIG.SINGLE_SERVER_ONLY then return end
    while true do
        if #Players:GetPlayers()>1 then player:Kick("Another player joined this server. Auto-leaving."); return end
        task.wait(2)
    end
end

local function toNumberMaybe(x)
    if typeof(x)=="number" then return x end
    if typeof(x)=="string" then
        local s=x:gsub(",",""):gsub("%$",""):gsub("_",""):gsub("%s+","")
        return tonumber(s)
    end
    return nil
end

local Animals={}
local function normalizeAnimalEntry(name, v)
    local function pick(tbl, ...) for i=1,select("#", ...) do local k=select(i, ...); if tbl[k]~=nil then return tbl[k] end end end
    local display=pick(v,"DisplayName","displayName","Name","name") or name
    local rarity=pick(v,"Rarity","rarity","Tier","tier") or "?"
    local price=pick(v,"Price","price","Cost","cost","Coins","Coin") or 0
    local gen=pick(v,"Generation","generation","Gen","gen")
    local fusion=pick(v,"Fusion","fusion","IsFusion","isFusion") and true or false
    local pnum=toNumberMaybe(price) or 0
    return {DisplayName=tostring(display),Rarity=tostring(rarity),Price=pnum,Generation=tonumber(gen),Fusion=fusion}
end

local function absorbFromTable(t, out)
    if typeof(t)~="table" then return 0 end
    local added=0
    for k,v in pairs(t) do
        if typeof(v)=="table" then
            local nm=v.DisplayName or v.Name or (typeof(k)=="string" and k)
            if typeof(nm)=="string" then
                local nrm=normalizeAnimalEntry(nm, v); out[nrm.DisplayName]=nrm; added=added+1
            end
        end
    end
    if added==0 then
        for _,v in ipairs(t) do
            if typeof(v)=="table" then
                local nm=v.DisplayName or v.Name
                if typeof(nm)=="string" then
                    local nrm=normalizeAnimalEntry(nm, v); out[nrm.DisplayName]=nrm; added=added+1
                end
            end
        end
    end
    return added
end

local function safeRequire(ms) local ok,res=pcall(require, ms); if ok then return res end end
local function refreshAnimals()
    local datas=ReplicatedStorage:FindFirstChild("Datas"); if not datas then return end
    local src=datas:FindFirstChild("Animals"); if not src then return end
    local tmp={}
    if src:IsA("ModuleScript") then
        local data=safeRequire(src); if data then absorbFromTable(data, tmp) end
    elseif src:IsA("Folder") then
        for _, ms in ipairs(src:GetDescendants()) do
            if ms:IsA("ModuleScript") then local data=safeRequire(ms) if data then absorbFromTable(data, tmp) end end
        end
    end
    Animals=tmp
end

local isBuying,isSelling,isCollecting=false,false,false
local function waitChar() return player.Character or player.CharacterAdded:Wait() end

local function fmt(n) return tostring(n):reverse():gsub("(%d%d%d)",",%1"):reverse():gsub("^,","") end
local function fmtShort(n)
    n=tonumber(n) or 0
    if n>=1e9 then return string.format("%.1fb", n/1e9)
    elseif n>=1e6 then return string.format("%.1fm", n/1e6)
    elseif n>=1e3 then return string.format("%.1fk", n/1e3)
    else return tostring(n) end
end

local function resetChar()
    local c=player.Character
    if not c then return end
    local h=c:FindFirstChildWhichIsA("Humanoid")
    if h then h.Health=0 else c:BreakJoints() end
end

local function getCashNumber()
    local ls=player:FindFirstChild("leaderstats"); if not ls then return 0 end
    local cashObj=ls:FindFirstChild("Cash") or ls:FindFirstChild("Money") or ls:FindFirstChild("Coins")
    if cashObj then
        local v=cashObj.Value
        if typeof(v)=="number" then return v end
        if typeof(v)=="string" then return toNumberMaybe(v) or 0 end
    end
    return 0
end

local function relaxPrompt(prompt)
    pcall(function()
        prompt.RequiresLineOfSight=false
        prompt.MaxActivationDistance=math.max(prompt.MaxActivationDistance or 10, CONFIG.MAX_ACTIVATION_DISTANCE or 26)
        if prompt.KeyboardKeyCode==Enum.KeyCode.Unknown then prompt.KeyboardKeyCode=Enum.KeyCode.E end
    end)
end

local function holdPromptReliable(prompt)
    if not (prompt and prompt:IsDescendantOf(Workspace)) then return false,"no_prompt" end
    relaxPrompt(prompt)
    local needHold=tonumber(prompt.HoldDuration) or 0
    local hardLimit=math.max(needHold+3.0,3.0)
    local startT=os.clock()
    if CONFIG.ZERO_HOLD_OVERRIDE then
        local old=prompt.HoldDuration
        local okSet=pcall(function() prompt.HoldDuration=0 end)
        local okBeg=pcall(function() ProximityPromptService:InputHoldBegin(prompt) end)
        task.wait(0.08)
        pcall(function() ProximityPromptService:InputHoldEnd(prompt) end)
        pcall(function() prompt.HoldDuration=old end)
        if okSet and okBeg then return true,"zero_hold_override" end
    end
    local done,cancelled=false,false
    local acc,holding,tBeg=0,false,0
    local con1=ProximityPromptService.PromptTriggered:Connect(function(p,plr) if p==prompt and plr==player then done=true end end)
    local con2=ProximityPromptService.PromptHidden:Connect(function(p) if p==prompt and not done then cancelled=true end end)
    local con3=ProximityPromptService.PromptButtonHoldBegan:Connect(function(p,plr) if p==prompt and plr==player then holding=true; tBeg=os.clock() end end)
    local con4=ProximityPromptService.PromptButtonHoldEnded:Connect(function(p,plr) if p==prompt and plr==player and holding then acc=acc+(os.clock()-tBeg); holding=false end end)
    local function begin() pcall(function() ProximityPromptService:InputHoldBegin(prompt) end) end
    local function finish() pcall(function() ProximityPromptService:InputHoldEnd(prompt) end) end
    begin()
    while not done do
        if (os.clock()-startT)>hardLimit then break end
        if cancelled and not done then cancelled=false; begin() end
        task.wait(0.06)
    end
    finish()
    if holding then acc=acc+(os.clock()-tBeg) end
    if con1 then con1:Disconnect() end
    if con2 then con2:Disconnect() end
    if con3 then con3:Disconnect() end
    if con4 then con4:Disconnect() end
    if done or acc>=needHold-1e-3 then
        return true,"ok"
    else
        return false,"timeout"
    end
end

local function nudgeTowards(root, targetPos, maxStep)
    local cur=root.Position
    local dir=(targetPos-cur)
    local d=dir.Magnitude
    if d<=1e-3 then return end
    local step=math.min(d,maxStep)
    local newPos=cur+dir.Unit*step
    root.CFrame=CFrame.new(newPos,newPos+root.CFrame.LookVector)
end

local function followAndHoldPrompt(prompt, hrp)
    if not (prompt and hrp and hrp:IsDescendantOf(Workspace)) then return false,"missing_target" end
    relaxPrompt(prompt)
    local char=waitChar()
    local root=char:FindFirstChild("HumanoidRootPart")
    local hum=char:FindFirstChildOfClass("Humanoid")
    if not (root and hum) then return false,"nohumanoid" end
    local maxD=(prompt.MaxActivationDistance or 10)
    local warnD=math.max(3.0,maxD-1.25)
    local burstD=maxD+3.25
    local nudge=0.22
    local oldWS,oldJP=hum.WalkSpeed,hum.JumpPower
    hum.WalkSpeed=math.max(oldWS or 16,22)
    hum.JumpPower=math.max(oldJP or 50,55)
    local function inRange() return (root.Position-hrp.Position).Magnitude<=maxD-0.05 end
    local tries=0
    while not inRange() and tries<120 do
        tries+=1
        hum:MoveTo(hrp.Position)
        local dist=(root.Position-hrp.Position).Magnitude
        if dist>burstD then
            local steps=math.ceil((dist-burstD)/nudge)
            for _=1,steps do
                if not hrp.Parent then break end
                nudgeTowards(root, hrp.Position, nudge)
                task.wait()
            end
        elseif dist>warnD then
            nudgeTowards(root, hrp.Position, nudge)
        end
        task.wait(0.08)
        if not (hrp.Parent and prompt.Parent) then hum.WalkSpeed,hum.JumpPower=oldWS,oldJP; return false,"target_gone" end
    end
    if not inRange() then hum.WalkSpeed,hum.JumpPower=oldWS,oldJP; return false,"cant_get_close" end
    local ok,_=holdPromptReliable(prompt)
    hum.WalkSpeed,hum.JumpPower=oldWS,oldJP
    return ok, ok and "ok" or "hold_fail"
end

local function waitPurchaseConfirm(plot, expectedName, beforeCount, beforeCash)
    local deadline=tick()+(CONFIG.PURCHASE_TIMEOUT or 25)
    local function petSpawned()
        for _, podium in ipairs(plot.AnimalPodiums:GetChildren()) do
            local sp=podium:FindFirstChild("Base") and podium.Base:FindFirstChild("Spawn")
            local at=sp and sp:FindFirstChild("Attachment")
            local oh=at and at:FindFirstChild("AnimalOverhead")
            local lbl=oh and oh:FindFirstChild("DisplayName")
            local name=lbl and lbl.Text
            if name and expectedName and name==expectedName then return true end
        end
        return false
    end
    while tick()<deadline do
        if countPets(plot)>(beforeCount or 0) then return true,"count" end
        local nowCash=getCashNumber()
        if beforeCash and nowCash<beforeCash then return true,"cash" end
        if expectedName and petSpawned() then return true,"spawn" end
        task.wait(0.15)
    end
    return false,"timeout"
end

local function startAntiAFK()
    task.spawn(function()
        while true do
            task.wait(60)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.L,false,game)
            task.wait(.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.L,false,game)
        end
    end)
end

local function findMyPlot(waitForSpawn)
    local deadline=tick()+(waitForSpawn and 10 or 0)
    repeat
        local plotsFolder=Workspace:FindFirstChild("Plots")
        for _, plot in ipairs(plotsFolder and plotsFolder:GetChildren() or {}) do
            local owner=plot:FindFirstChild("Owner")
            if owner and owner.Value==player then return plot end
            local sign=plot:FindFirstChild("PlotSign")
            local sg=sign and sign:FindFirstChild("SurfaceGui")
            local fr=sg and sg:FindFirstChild("Frame")
            local lbl=fr and fr:FindFirstChild("TextLabel")
            if lbl and typeof(lbl.Text)=="string" then
                local lo=lbl.Text:lower()
                if lo:find(player.Name:lower(),1,true) or lo:find(player.DisplayName:lower(),1,true) then return plot end
            end
        end
        task.wait(.25)
    until tick()>deadline
end

local function walkTo(pos)
    local char=waitChar()
    local root=char:WaitForChild("HumanoidRootPart")
    local hum=char:FindFirstChildOfClass("Humanoid"); if not hum then return false end
    local reached,conn=false,nil
    conn=hum.MoveToFinished:Connect(function(success) reached=success end)
    local timeout=10
    hum:MoveTo(pos)
    local start=tick()
    while not reached and tick()-start<timeout do
        if (root.Position-pos).Magnitude<=3 then reached=true; break end
        task.wait(0.2)
    end
    if conn then pcall(function() conn:Disconnect() end) end
    return reached
end

countPets=function(plot)
    local pod=plot:FindFirstChild("AnimalPodiums"); if not pod then return 0 end
    local n=0
    for _, p in ipairs(pod:GetChildren()) do
        local sp=p:FindFirstChild("Base") and p.Base:FindFirstChild("Spawn")
        if sp and sp:FindFirstChild("Attachment") then n=n+1 end
    end
    return n
end

getPetDataFromSpawn=function(sp)
    if not sp then return nil end
    local at=sp:FindFirstChild("Attachment")
    local oh=at and at:FindFirstChild("AnimalOverhead")
    local lbl=oh and oh:FindFirstChild("DisplayName")
    local name=lbl and lbl.Text
    if not name or name=="" then return nil end
    local mut="Normal"
    local mutVal=sp:FindFirstChild("Mutation") or sp:FindFirstChild("MutateLevel")
    if mutVal then
        if mutVal:IsA("StringValue") then mut=mutVal.Value
        elseif mutVal:IsA("IntValue") then mut=({[0]="Normal",[1]="Golden",[2]="Diamond",[3]="Rainbow"})[mutVal.Value] or mut end
    end
    local infoA=Animals[name] or {}
    local price=infoA.Price or 0
    local rarity=infoA.Rarity or "?"
    return {name=name,mut=mut,rar=rarity,price=price}
end

local function sellCheapestPet(plot)
    local pod=plot:FindFirstChild("AnimalPodiums"); if not pod then return false end
    if countPets(plot)<CONFIG.MAX_PETS then return false end
    local cheapestInfo,cheapestPodium
    for _, podium in ipairs(pod:GetChildren()) do
        local sp=podium:FindFirstChild("Base") and podium.Base:FindFirstChild("Spawn")
        local info=getPetDataFromSpawn(sp)
        if info and info.price and info.price>0 and not (GAGCONFIG.PROTECTED_RARITIES and GAGCONFIG.PROTECTED_RARITIES[info.rar]) then
            local id=tonumber(podium.Name)
            if id and (not cheapestInfo or info.price<cheapestInfo.price) then cheapestInfo,cheapestPodium=info,id end
        end
    end
    if cheapestPodium then
        SellRemote:FireServer(cheapestPodium)
        return true
    end
    return false
end

local function sellOneIfFull(plot)
    if isBuying or isCollecting then return end
    if countPets(plot)<CONFIG.MAX_PETS then return end
    isSelling=true
    sellCheapestPet(plot)
    isSelling=false
end

local function getModelHRP(m) return m and (m:FindFirstChild("HumanoidRootPart") or m.PrimaryPart or m:FindFirstChildWhichIsA("BasePart", true)) end
local function hasDisplayName(model) local lbl=model and model:FindFirstChild("DisplayName", true); return (lbl and lbl:IsA("TextLabel") and (lbl.Text or "")~=""), lbl end
local function isOnPodium(model) return model:FindFirstAncestor("AnimalPodiums")~=nil or model:FindFirstAncestor("Plots")~=nil or model:FindFirstChild("Attachment", true)~=nil end

local MAX_MOVING_POOL=400
local MovingIndex={list={},pos=1}
local setFromModel={}
local function pushModel(m)
    if setFromModel[m] then return end
    if #MovingIndex.list>=MAX_MOVING_POOL then
        local drop=table.remove(MovingIndex.list,1)
        if drop then setFromModel[drop]=nil end
    end
    setFromModel[m]=true
    table.insert(MovingIndex.list,m)
end
local function removeModel(m) if setFromModel[m] then setFromModel[m]=nil end end
local function indexModelFromPrompt(pp)
    local m=pp and pp:FindFirstAncestorOfClass("Model"); if not m then return end
    if isOnPodium(m) then return end
    local okName=hasDisplayName(m)
    local part=getModelHRP(m)
    if okName and part and (pp.Enabled~=false) then pushModel(m) end
end

local function iterMovingAnimals(maxTake)
    maxTake=math.min(90, tonumber(maxTake or 90) or 90)
    local out,n={},0
    if #MovingIndex.list==0 then return out end
    local i=MovingIndex.pos
    while n<math.min(maxTake, #MovingIndex.list) do
        local m=MovingIndex.list[i]
        if m and m.Parent then out[#out+1]=m; n=n+1 end
        i=i+1
        if i>#MovingIndex.list then i=1 end
    end
    MovingIndex.pos=i
    return out
end

local function warmIndex()
    local all=Workspace:GetDescendants()
    local i,n,B=1,#all,450
    while i<=n do
        local j=math.min(i+B-1,n)
        for k=i,j do
            local d=all[k]
            if d and d.Parent and d:IsA("ProximityPrompt") and d.Enabled~=false then
                indexModelFromPrompt(d)
            end
        end
        i=j+1
        task.wait(0.03)
    end
    Workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("ProximityPrompt") and obj.Enabled~=false then indexModelFromPrompt(obj) end
    end)
    Workspace.DescendantRemoving:Connect(function(obj)
        if obj:IsA("ProximityPrompt") then
            local m=obj:FindFirstAncestorOfClass("Model")
            if m and setFromModel[m] then setFromModel[m]=nil end
        end
    end)
    Scheduler.every("compactMoving",10,function()
        local new,newset={},{}
        for _, m in ipairs(MovingIndex.list) do
            if setFromModel[m] and m.Parent~=nil then new[#new+1]=m; newset[m]=true end
        end
        MovingIndex.list,setFromModel=new,newset
        if MovingIndex.pos>#MovingIndex.list then MovingIndex.pos=1 end
    end)
end

local function getMinPlotPrice(plot)
    local minPrice
    if not plot then return nil end
    local pod=plot:FindFirstChild("AnimalPodiums"); if not pod then return nil end
    for _, p in ipairs(pod:GetChildren()) do
        local sp=p:FindFirstChild("Base") and p.Base:FindFirstChild("Spawn")
        local info=getPetDataFromSpawn(sp)
        if info and type(info.price)=="number" and info.price>0 then
            if not minPrice or info.price<minPrice then minPrice=info.price end
        end
    end
    return minPrice
end

local function getMaxPlotPrice(plot)
    local maxPrice
    if not plot then return nil end
    local pod=plot:FindFirstChild("AnimalPodiums"); if not pod then return nil end
    for _, p in ipairs(pod:GetChildren()) do
        local sp=p:FindFirstChild("Base") and p.Base:FindFirstChild("Spawn")
        local info=getPetDataFromSpawn(sp)
        if info and type(info.price)=="number" and info.price>0 then
            if not maxPrice or info.price>maxPrice then maxPrice=info.price end
        end
    end
    return maxPrice
end

local function logChoice(name, price, rarity) print(("[PICK] %s | $%s | %s"):format(tostring(name), tostring(price), tostring(rarity))) end

pickBestPet=function(plot)
    local cash=getCashNumber()
    local hasAny=(countPets(plot) or 0)>0
    local maxPriceInPlot=hasAny and getMaxPlotPrice(plot) or nil
    local bestSecret,bestMeetsThreshold,bestIfEmpty
    for _, mover in ipairs(iterMovingAnimals(90)) do
        local lbl=mover:FindFirstChild("DisplayName", true)
        local hrp=getModelHRP(mover)
        if lbl and hrp then
            local d=Animals[lbl.Text]
            local price=d and d.Price
            if d and price and price<=cash then
                local rarity=d.Rarity
                if rarity=="Secret" then
                    if (not bestSecret) or price>bestSecret.price then
                        bestSecret={name=lbl.Text,price=price,rarity=rarity,hrp=hrp,model=mover}
                    end
                elseif not hasAny then
                    if (not bestIfEmpty) or price>bestIfEmpty.price then
                        bestIfEmpty={name=lbl.Text,price=price,rarity=rarity,hrp=hrp,model=mover}
                    end
                else
                    if maxPriceInPlot and price>=maxPriceInPlot then
                        if (not bestMeetsThreshold) or price>bestMeetsThreshold.price then
                            bestMeetsThreshold={name=lbl.Text,price=price,rarity=rarity,hrp=hrp,model=mover}
                        end
                    end
                end
            end
        end
    end
    local pick=bestSecret or bestMeetsThreshold or (not hasAny and bestIfEmpty or nil)
    if pick then logChoice(pick.name, pick.price, pick.rarity) end
    return pick
end

local function followPet(hrp)
    local char=waitChar()
    local root=char:WaitForChild("HumanoidRootPart")
    local hum=char:WaitForChild("Humanoid")
    local start=tick()
    while tick()-start<15 do
        if not hrp:IsDescendantOf(Workspace) then return true end
        if (root.Position-hrp.Position).Magnitude<=5 then return true end
        hum:MoveTo(hrp.Position); task.wait(0.1)
    end
    return false
end

local function rarityStyle(r)
    local map={
        Secret={0xE74C3C,"🟥","SECRET"}, ["Brainrot God"]={0x9B59B6,"🟪","BRAINROT GOD"},
        Legendary={0xF1C40F,"🟨","LEGENDARY"}, Mythic={0xE67E22,"🟧","MYTHIC"},
        Epic={0x3498DB,"🟦","EPIC"}, Rare={0x2ECC71,"🟩","RARE"}, Common={0x95A5A6,"⬜","COMMON"},
    }
    local t=map[r] or {0x00FFFF,"🔷",tostring(r or "UNKNOWN")}
    return t[1],t[2],t[3]
end

local function usernameTag() return ("🐾 Pet Logger • %s"):format(Players.LocalPlayer and Players.LocalPlayer.DisplayName or "Player") end
local function avatarUrl() local uid=Players.LocalPlayer and Players.LocalPlayer.UserId or 1; return ("https://www.roblox.com/headshot-thumbnail/image?userId=%d&width=150&height=150&format=png"):format(uid) end
local __lastWebhookAt=0
local function sendWebhook(name, price, rarity, mutation)
    if not (GAGCONFIG.WEBHOOK_RARITIES and GAGCONFIG.WEBHOOK_RARITIES[rarity]) then return false end
    local dt=os.clock()-__lastWebhookAt
    if dt<0.6 then task.wait(0.6-dt) end
    local color,emoji,banner=rarityStyle(rarity)
    local payload={
        content=(GAGCONFIG.TAG_USER_ID and ("<@"..GAGCONFIG.TAG_USER_ID.."> ") or "").."🛍️ A new pet has been purchased!",
        username=usernameTag(),
        avatar_url=avatarUrl(),
        embeds={{
            title=(emoji.." "..name),
            description=("**%s** • *%s*"):format(banner, mutation or "?"),
            color=color,
            fields={
                {name="🌟 Rarity",value=tostring(rarity or "?"),inline=true},
                {name="💠 Mutation",value=tostring(mutation or "?"),inline=true},
                {name="💵 Price",value="$"..fmt(price).." ("..fmtShort(price)..")",inline=true},
                {name="👤 Account",value=(Players.LocalPlayer and Players.LocalPlayer.DisplayName) or "Player",inline=true},
                {name="🕒 Time (UTC)",value=os.date("!%Y-%m-%d %H:%M:%S"),inline=true},
            },
            footer={text="ZeroPoint • Auto Pet Manager"},
        }}
    }
    local req=syn and syn.request or http_request or request
    if not req then return false end
    local function post(url)
        return pcall(function()
            return req({Url=url,Method="POST",Headers={["Content-Type"]="application/json"},Body=HttpService:JSONEncode(payload)})
        end)
    end
    local urls={GAGCONFIG.WEBHOOK_URL,CONFIG.PUBLIC_WEBHOOK_URL}
    task.spawn(function()
        for _, url in ipairs(urls) do
            if url and url~="" then
                local ok,res=post(url)
                if not (ok and res and res.StatusCode and res.StatusCode>=200 and res.StatusCode<300) then
                    if res and res.StatusCode==429 then
                        local retryAfter=1.0
                        local data=nil
                        pcall(function() data=HttpService:JSONDecode(res.Body or "{}") end)
                        if data and tonumber(data.retry_after) then retryAfter=math.min(3.0, tonumber(data.retry_after)) end
                        task.wait(retryAfter)
                        post(url)
                    end
                end
            end
        end
    end)
    __lastWebhookAt=os.clock()
    return true
end

local function walkToDeliveryHitbox(plot)
    if not plot then return end
    local delivery=plot:FindFirstChild("DeliveryHitbox")
    if delivery and delivery:IsA("BasePart") then
        local offsetPos=delivery.Position+Vector3.new(0,0,3)
        walkTo(offsetPos)
    end
end

local function buyBestPet(plot, choice)
    if sellCheapestPet(plot) then return end
    isBuying=true
    local function finalize(success) if success then resetChar() end isBuying=false end
    if not followPet(choice.hrp) then return finalize(false) end
    local prompt=choice.model:FindFirstChildWhichIsA("ProximityPrompt", true)
    if not (prompt and prompt.Enabled) then return finalize(false) end
    relaxPrompt(prompt)
    local beforeCount=countPets(plot)
    local beforeCash=getCashNumber()
    local okHold,_=followAndHoldPrompt(prompt, choice.hrp)
    if not okHold then return finalize(false) end
    local ok,_=waitPurchaseConfirm(plot, choice.name, beforeCount, beforeCash)
    if ok then
        local newPet; local timeout=tick()+25
        repeat
            for _, podium in ipairs(plot.AnimalPodiums:GetChildren()) do
                local sp=podium:FindFirstChild("Base") and podium.Base:FindFirstChild("Spawn")
                local inf=getPetDataFromSpawn(sp)
                if inf and inf.name==choice.name then newPet=inf; break end
            end
            if newPet then break end
            task.wait(0.6)
        until tick()>timeout
        if newPet then sendWebhook(newPet.name, newPet.price, newPet.rar, newPet.mut) end
        return finalize(true)
    end
    return finalize(false)
end

local function stealBestPet(plot)
    if isSelling or isCollecting then return end
    walkToDeliveryHitbox(plot)
    if countPets(plot)>=CONFIG.MAX_PETS then sellOneIfFull(plot) end
    local choice=pickBestPet(plot)
    if not choice then return end
    buyBestPet(plot, choice)
end

local function collectFromPodiums(plot)
    if isBuying or isSelling then return end
    isCollecting=true
    for _, id in ipairs(CONFIG.CLAIM_PODIUM_IDS) do
        local podium=plot:FindFirstChild("AnimalPodiums") and plot.AnimalPodiums:FindFirstChild(id)
        local claim=podium and podium:FindFirstChild("Claim")
        if claim then
            local pos=claim:IsA("Model") and (claim.PrimaryPart or claim:GetPivot()).Position or claim.Position
            walkTo(pos)
        end
        if isBuying or isSelling then isCollecting=false; return end
        local pending=pickBestPet(plot)
        if pending then isCollecting=false; stealBestPet(plot); return end
    end
    isCollecting=false
end

local function shortenNumber(n)
    if n>=1e9 then return string.format("%.1fb",n/1e9)
    elseif n>=1e6 then return string.format("%.1fm",n/1e6)
    elseif n>=1e3 then return string.format("%.1fk",n/1e3)
    else return tostring(n) end
end

local function colorFor(rarity) return rarity=="Secret" and "rgb(255,60,60)" or "rgb(255,180,40)" end

local function hasSecret(plot)
    if not plot then return false end
    local pods=plot:FindFirstChild("AnimalPodiums"); if not pods then return false end
    for _, pod in ipairs(pods:GetChildren()) do
        local base=pod:FindFirstChild("Base")
        local sp=base and base:FindFirstChild("Spawn")
        if sp then
            local info=getPetDataFromSpawn(sp)
            if info and info.rar=="Secret" then return true end
        end
    end
    return false
end

local function bestPetText(plot)
    local best
    if plot then
        local pods=plot:FindFirstChild("AnimalPodiums")
        if pods then
            for _, pod in ipairs(pods:GetChildren()) do
                local sp=pod:FindFirstChild("Base") and pod.Base:FindFirstChild("Spawn")
                if sp then
                    local info=getPetDataFromSpawn(sp)
                    if info and (not best or info.price>best.price) then best=info end
                end
            end
        end
    end
    if not best then return "None" end
    return string.format('<font color="%s">%s : %s : %s</font>', colorFor(best.rar), best.name, best.mut, best.rar)
end

local function petsList(plot)
    local lines={}
    if plot then
        local pods=plot:FindFirstChild("AnimalPodiums")
        if pods then
            for _, pod in ipairs(pods:GetChildren()) do
                local sp=pod:FindFirstChild("Base") and pod.Base:FindFirstChild("Spawn")
                if sp then
                    local info=getPetDataFromSpawn(sp)
                    if info then table.insert(lines, string.format('<font color="%s">%s : %s : %s</font>', colorFor(info.rar), info.name, info.mut, info.rar)) end
                end
            end
        end
    end
    return (#lines>0) and table.concat(lines,"\n") or "None"
end

local guiFields,overlay,rootGui
local __lastGuiTs=0
local function createGUI()
    local old=game.CoreGui:FindFirstChild("PetManagerHUD"); if old then old:Destroy() end
    local gui=Instance.new("ScreenGui")
    gui.Name="PetManagerHUD"; gui.IgnoreGuiInset=true; gui.ResetOnSpawn=false
    gui.ZIndexBehavior=Enum.ZIndexBehavior.Global; gui.Enabled=true; gui.Parent=game.CoreGui
    local _overlay=Instance.new("Frame")
    _overlay.Name="Overlay"; _overlay.BackgroundColor3=Color3.new(0,0,0); _overlay.BackgroundTransparency=1
    _overlay.Size=UDim2.new(1,0,1,0); _overlay.Position=UDim2.new(0,0,0,0); _overlay.ZIndex=10
    _overlay.Active=false; _overlay.Visible=false; _overlay.Parent=gui
    local container=Instance.new("Frame")
    container.Name="Container"; container.BackgroundTransparency=1
    container.Size=UDim2.new(0.6,0,0,0); container.Position=UDim2.new(0.05,0,0.1,0)
    container.AutomaticSize=Enum.AutomaticSize.Y; container.ZIndex=20; container.Parent=gui
    local scale=Instance.new("UIScale", container)
    local vp=Workspace.CurrentCamera and Workspace.CurrentCamera.ViewportSize or Vector2.new(1920,1080)
    scale.Scale=math.clamp(math.min(vp.X,vp.Y)/1080,0.6,1)
    local layout=Instance.new("UIListLayout")
    layout.Padding=UDim.new(0,10); layout.FillDirection=Enum.FillDirection.Vertical
    layout.SortOrder=Enum.SortOrder.LayoutOrder; layout.Parent=container
    local fields,titles={},{"👤 ZeroPoint [Account] :", "💰 Cash:", "🐾 Pets in plot:", "🏆 Highest-value pet:", "📋 Pets list:"}
    for i, text in ipairs(titles) do
        local label=Instance.new("TextLabel")
        label.Name="Label"..i; label.BackgroundTransparency=1
        label.Font=Enum.Font.SourceSansBold; label.TextScaled=true; label.TextWrapped=true
        label.RichText=true; label.TextXAlignment=Enum.TextXAlignment.Left
        label.TextColor3=Color3.new(1,1,1); label.AutomaticSize=Enum.AutomaticSize.Y
        label.TextStrokeTransparency=0.2; label.TextStrokeColor3=Color3.new(0,0,0)
        label.Size=UDim2.new(1,0,0,0); label.Text=text.." …"; label.ZIndex=20
        local txtConstraint=Instance.new("UITextSizeConstraint"); txtConstraint.MaxTextSize=(i==1 and 28 or 20); txtConstraint.MinTextSize=12; txtConstraint.Parent=label
        label.Parent=container; fields[i]=label
    end
    return fields,_overlay,gui
end

local function createToggle(rootGui_)
    local oldToggle=game.CoreGui:FindFirstChild("PetManagerToggle"); if oldToggle then oldToggle:Destroy() end
    local toggleGui=Instance.new("ScreenGui")
    toggleGui.Name="PetManagerToggle"; toggleGui.IgnoreGuiInset=true; toggleGui.ResetOnSpawn=false
    toggleGui.ZIndexBehavior=Enum.ZIndexBehavior.Global; toggleGui.Parent=game.CoreGui
    local btn=Instance.new("TextButton")
    btn.Name="ToggleBtn"; btn.Size=UDim2.new(0,120,0,36); btn.Position=UDim2.new(1,-132,0,12)
    btn.BackgroundColor3=Color3.fromRGB(30,30,30); btn.TextColor3=Color3.fromRGB(255,255,255)
    btn.Font=Enum.Font.GothamBold; btn.TextScaled=true; btn.Text=rootGui_.Enabled and "GUI: ON" or "GUI: OFF"
    btn.AutoButtonColor=true; btn.Parent=toggleGui
    local uic=Instance.new("UICorner", btn); uic.CornerRadius=UDim.new(0,8)
    local dragging,dragStart,startPos
    btn.InputBegan:Connect(function(input)
        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
            dragging=true; dragStart=input.Position; startPos=btn.Position
            input.Changed:Connect(function() if input.UserInputState==Enum.UserInputState.End then dragging=false end end)
        end
    end)
    btn.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch) then
            local delta=input.Position - dragStart
            btn.Position=UDim2.new(startPos.X.Scale, startPos.X.Offset+delta.X, startPos.Y.Scale, startPos.Y.Offset+delta.Y)
        end
    end)
    btn.MouseButton1Click:Connect(function()
        rootGui_.Enabled=not rootGui_.Enabled; btn.Text=rootGui_.Enabled and "GUI: ON" or "GUI: OFF"
    end)
end

local function refreshGui()
    local now=os.clock()
    if now-__lastGuiTs<2.5 then return end
    __lastGuiTs=now
    local myPlot=findMyPlot()
    local cash=(player.leaderstats and player.leaderstats:FindFirstChild("Cash") and player.leaderstats.Cash.Value) or 0
    guiFields[1].Text="👤 ZeroPoint [Account] : "..player.Name
    local cashNum=(typeof(cash)=="number" and cash) or (toNumberMaybe(cash) or 0)
    guiFields[2].Text="💰 Cash: $"..shortenNumber(cashNum)
    local nPets=myPlot and countPets(myPlot) or 0
    guiFields[3].Text="🐾 Pets in plot: "..nPets
    guiFields[4].Text="🏆 Highest-value pet: "..bestPetText(myPlot)
    guiFields[5].Text="📋 Pets list:\n"..petsList(myPlot)
end

local function startPingGuard()
    local PING_LIMIT_MS=2000
    local CHECK_INTERVAL=1.0
    local REQUIRED_CONSECUTIVE=3
    local consecutive=0
    local function getPingMs()
        local net=Stats and Stats.Network
        if not net then return nil end
        local item=net.ServerStatsItem and net.ServerStatsItem["Data Ping"]
        if item and typeof(item.GetValue)=="function" then return math.floor(item:GetValue()) end
        return nil
    end
    task.spawn(function()
        while task.wait(CHECK_INTERVAL) do
            local ping=getPingMs()
            if ping then
                if ping>PING_LIMIT_MS then
                    consecutive=consecutive+1
                    if consecutive>=REQUIRED_CONSECUTIVE then
                        player:Kick(("High ping: %d ms (limit %d ms)"):format(ping,PING_LIMIT_MS))
                        break
                    end
                else
                    consecutive=0
                end
            end
        end
    end)
end

local STATE="IDLE"
local BOOT_READY=false
local __con_strip
local function hideMap() end

local function BootAll()
    local steps={
        {fn=function() killPostEffects(); makeBlackSky(); createSafeFloor() end},
        {fn=function()
            __con_strip=Workspace.DescendantAdded:Connect(function(obj)
                local c=obj and obj.ClassName
                if c and (HEAVY_CLASSES[c]) then pcall(function() if stripEffects then stripEffects(obj) end end) end
            end)
            task.spawn(function()
                local list=Workspace:GetDescendants()
                local i,n,B=1,#list,500
                while i<=n do
                    local j=math.min(i+B-1,n)
                    for k=i,j do local d=list[k]; if d and d.Parent then pcall(function() stripEffects(d) end) end end
                    i=j+1
                    task.wait(0.03)
                end
            end)
        end},
        {fn=function()
            local datas=ReplicatedStorage:WaitForChild("Datas",10)
            if datas then
                local muts=datas:FindFirstChild("Mutations")
                if muts and muts:IsA("ModuleScript") then local ok,res=pcall(require, muts) if ok then MutationsData=res end end
            end
            refreshAnimals()
        end},
        {fn=function() warmIndex() end},
        {fn=function()
            guiFields,overlay,rootGui=createGUI()
            createToggle(rootGui)
            task.defer(function()
                refreshGui()
                if player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Cash") then
                    player.leaderstats.Cash.Changed:Connect(refreshGui)
                end
                local myPlotEarly=findMyPlot()
                if myPlotEarly and myPlotEarly:FindFirstChild("AnimalPodiums") then
                    myPlotEarly.AnimalPodiums.ChildAdded:Connect(refreshGui)
                    myPlotEarly.AnimalPodiums.ChildRemoved:Connect(refreshGui)
                end
                Scheduler.every("guiRefreshFallback",10,refreshGui)
            end)
        end},
        {fn=function() startAntiAFK(); startPingGuard(); task.spawn(singleServerWatchdog) end},
        {fn=function()
            Scheduler.every("lightFXRefresh",45,function()
                pcall(function() killPostEffects() if not Lighting:FindFirstChild("MinimalBlackSky") then makeBlackSky() end end)
            end)
        end},
        {fn=function() BOOT_READY=true end},
    }
    for _, s in ipairs(steps) do pcall(s.fn) task.wait(0.02) end
end

task.spawn(function()
    repeat task.wait() until game:IsLoaded()
    repeat task.wait() until player.Character or player.CharacterAdded:Wait()
    killPostEffects(); makeBlackSky(); createSafeFloor()
    BootAll()
    if not guiFields then guiFields,overlay,rootGui=createGUI(); createToggle(rootGui) end
end)

Scheduler.every("mainLoop",1.0,function()
    if not BOOT_READY then return end
    if STATE~="IDLE" then return end
    local myPlot=findMyPlot(true)
    if not myPlot then return end
    if countPets(myPlot)>=CONFIG.MAX_PETS then
        STATE="SELL"
        sellOneIfFull(myPlot)
        STATE="IDLE"
        return
    end
    STATE="COLLECT"
    collectFromPodiums(myPlot)
    STATE="IDLE"
    local choice=pickBestPet(myPlot)
    if choice then
        STATE="STEAL"
        stealBestPet(myPlot)
        STATE="IDLE"
    end
end)
